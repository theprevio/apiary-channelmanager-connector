FORMAT: 1A
HOST: http://chm.previo.cz/previoapi


# CHM connector

API for communication between Previo PMS and CHM app.

## Authorization [/authorize-partner]
So far only for Airbnb.
### Authorize [POST]
+ Request (application/json)

    + Headers
    
            Chm-Login: Username or client Id
            Chm-Secret: Encrypted password or secret Id
    
    + Attributes

        + code: `code` (string)

+ Response 200

    + Attributes
        + success: true (boolean, required)
        + userId: 123 (number, optional)
        + token: `asdfxvanef` (string, optional)
        + errors: Invalid payload (array[string], required)

### Revoke [DELETE]
+ Request (application/json)

    + Headers
    
            Chm-Login: Username or client Id
            Chm-Secret: Encrypted password or secret Id
            Chm-Token: Encrypted refresh token

+ Response 200

    + Attributes
        + success: true (boolean, required)
        + message (object, optional)
            + status (number, optional)
            + body (string, optional)
        + errors: Invalid payload (array[string], required)

## Partner settings [/setup-partner]
So far only for Airbnb.
### Verify listings [PUT]
+ Request (application/json)

    + Headers
    
            Chm-Login: Username or client Id
            Chm-Secret: Encrypted password or secret Id
            Chm-Token: Encrypted refresh token
    
    + Attributes (StandartAttributes)
    
    + Body

            {
                123456, 123457 // listings ids
            }

+ Response 201

    In real 200 :-(

    + Attributes
        + success: false (boolean, required)

+ Response 200

    + Attributes
        + result (array, optional) Array of listing details
        + errors: Invalid payload (array[string], required)

### Update listings [PATCH]
+ Request (application/json)
t
    + Headers
    
            Chm-Login: Username or client Id
            Chm-Secret: Encrypted password or secret Id
            Chm-Token: Encrypted refresh token
    
    + Attributes (StandartAttributes)
    
    + Body

            {
                "action" : "unlist", // or "verify" or "publish"
                "listings" : [123456, 123457] // listings ids
            }

+ Response 201

    In real 200 :-(

    + Attributes
        + success: false (boolean, required)

+ Response 200

    + Attributes
        + result (array, optional) Array of listing details
        + errors: Invalid payload (array[string], required)

### Unlink listing [DELETE]
+ Request (application/json)

    + Headers
    
            Chm-Login: Username or client Id
            Chm-Secret: Encrypted password or secret Id
            Chm-Token: Encrypted refresh token
    
    + Attributes (StandartAttributes)
    
    + Body

            {
                123456, 123457 // listings ids
            }

+ Response 201

    In real 200 :-(

    + Attributes
        + success: false (boolean, required)

+ Response 200

    + Attributes
        + result (array, optional) Array of listing details
        + errors: Invalid payload (array[string], required)

## Price Actions Collection [/price-actions{?hotelId}{?partnerId}]
+ Parameters
    + hotelId: 123 (integer) - ID of the hotel
    + partnerId: 1262 (integer) - ID of the partner (OTA)
    
### Update price discounts (Lastminute, Longterm, etc.) [PUT]
+ Request (application/json)

    + Headers
    
            Chm-Login: Username or client Id
            Chm-Secret: Encrypted password or secret Id
            Chm-Token: Encrypted refresh token

    + Attributes (array[PriceActionRequest])
    
+ Response 200 (application/json)

    + Attributes (SuccessResponseBoolean)

+ Response 500 (application/json)

    + Attributes (ErrorResponseBoolean)

## Room kind Collection [/room{?hotelId}{?partnerId}]
+ Parameters
    + hotelId: 123 (integer) - ID of the hotel
    + partnerId: 1262 (integer) - ID of the partner (OTA)
    
### Get list of rooms available on OTA [GET]
+ Request (application/json)

    + Headers
    
            Chm-Login: Username or client Id
            Chm-Secret: Encrypted password or secret Id
            Chm-Token: Encrypted refresh token

    
+ Response 200 (application/json)

    + Attributes
        + result (array[RoomTypeResponse])
        + errors (array)

+ Response 500 (application/json)

    + Attributes (ErrorResponseArray)

### Get room detail on OTA [GET /room/{roomId}{?hotelId,partnerId}]
+ Request (application/json)

    + Headers
    
            Chm-Login: Username or client Id
            Chm-Secret: Encrypted password or secret Id
            Chm-Token: Encrypted refresh token

    
+ Response 200 (application/json)

    + Attributes
        + result (array[RoomTypeResponseExtra])
        + errors (array)

+ Response 500 (application/json)

    + Attributes (ErrorResponseArray)
    

## Rate plan Collection [/rate-plan{?hotelId,partnerId,roomId}]
+ Parameters
    + hotelId: 123 (integer) - ID of the hotel
    + partnerId: 1262 (integer) - ID of the partner (OTA)
    + roomId: 456358 (integer, optional) - ID of the room when rate plan is per room (OTA)

### Get list of rate plans available on OTA [GET]
+ Request (application/json)

    + Headers
    
            Chm-Lognn: Username or client Id
            Chm-Secret: Encrypted password or secret Id
            Chm-Token: Encrypted refresh token

    
+ Response 200 (application/json)

    + Attributes
        + result (array[RatePlanResponse])
        + errors (array)

+ Response 500 (application/json)

    + Attributes (ErrorResponseArray)

## Create / Update rooms and rates [/rooms-rates{?hotelId}{?partnerId}]
It\'s a single endpoint because some OTAs require to push rooms and rates in single request.

+ Parameters
    + hotelId: 123 (integer) - ID of the hotel
    + partnerId: 1262 (integer) - ID of the partner (OTA)
    
### Update rooms & rates [PUT]
+ Request (application/json)

    + Headers
    
            Chm-Login: Username or client Id
            Chm-Secret: Encrypted password or secret Id
            Chm-Token: Encrypted refresh token

    + Attributes (array[RoomsRatesRequest])
    
+ Response 200 (application/json)

    + Attributes (SuccessResponseBoolean)

+ Response 500 (application/json)

    + Attributes (ErrorResponseBoolean)


## Rabbit MQ Reservation [/]
This is not real API endpoint. This is just description what is the Reservation message structure exchanged between Channel manager app and Previo Rabbit MQ queue.

When the reservation from RabbitMQ queue has been processed the Previo returns immediately to CHM information what is the result (RPC). List of errors, that can Previo return to CHM app:

| errorCode | message                                                  |
|-----------|----------------------------------------------------------|
|2000|Missing header|
|2001| Invalid header|
|2002| Unable to parse the message|
|2003| Json schema validation failed|
|3200| The booking was already cancelled|
|3201| The supplier confirmation number is missing or invalid|
|3202| The property Identifier is missing or invalid|
|3203| The Room Type Code is missing or invalid|
|3204| The Rate Plan Code is missing or invalid|
|3205| The guest name is missing|
|3206| The Check-in date is missing or invalid|
|3207| The check-out date is missing or invalid|
|3208| The guest count is missing or invalid|
|3209| Duplicate booking|
|3210| Requested room is not available|
|3211| Requested room could not be matched to any commission|
|3300| Unable to process the credit card information|
|3301| Payment type not accepted or payment type change not allowed|
|4000| Software error|
|5000| Database error|
|5001| Database error|
|6000| Unknown error|



### Reservation [POST]

+ Request (application/json)
    + Attributes (ReservationRequest)

    
+ Response 200 (application/json)

    + Attributes
        + result (array[RatePlanResponse])
        + errors (array)

+ Response 500 (application/json)

    + Attributes (ErrorResponseArray)
    


## Reservation [/reservation-details{?hotelId}{?partnerId}{?reservationId}]
Pull the reservation from OTA

+ Parameters
    + hotelId: 123 (integer) - ID of the hotel
    + partnerId: 1262 (integer) - ID of the partner (OTA)
    + reservationId: 1262332 (string) - ID of the reservation

+ Headers

        Chm-Login: Username or client Id
        Chm-Secret: Encrypted password or secret Id
        Chm-Token: Encrypted refresh token


### Reservation [GET]

+ Request (application/json)

    
+ Response 200 (application/json)

    + Attributes
        + result (array[ReservationRequest])
        + errors (array)

+ Response 500 (application/json)

    + Attributes (ErrorResponseArray)

### Reservation confirm [PATCH /reservation-confirm{?hotelId}{?partnerId}]

+ Request (application/json)
    + Parameters
        + hotelId: 123 (integer) - ID of the hotel
        + partnerId: 1262 (integer) - ID of the partner (OTA)
    
    + Body
    
            {
                "reservations": [
                    {
                        "id": "004FW"
                        "partnerId": 2
                    }, {
                        "id": "483CNWR"
                        "partnerId": 85
                    }
                ]
            }

+ Response 200 (application/json)

    + Attributes
        + success: true (boolean)
        + message (string)
        + errors (array)
        + data (object)
            + reservationsConfirmed: 2 (number)
    

## Credit Card [/credit-cards]
API for working with credit cards stored in AWS server

Error Codes:
| Code | Description                                         | Source       | HTTP code |
|------|-----------------------------------------------------|--------------|-----------|
| 1001 | Credit Card not found.                              | Elastic      | 404       |
| 1002 | Cannot transform response.                          | Elastic      | 500       |
| 1003 | Cannot provide request.                             | Elastic      | 500       |
| 1004 | Credit Card is Locked.                              | Elastic      | 404       |
| 2001 | You don’t have permission to access on this Server. | Firewall     | 403       |
| 2002 | Your Request is invalid.                            | Firewall     | 404       |
| 3001 | header (name) must be set.                          | Headers      | 400       |
| 3002 | Invalid (name) length.                              | Headers      | 400       |
| 4001 | Decryption failed.                                  | Cryptography | 500       |
| 4002 | Encryption failed.                                  | Cryptography | 500       |
| 4003 | Cannot read key.                                    | Cryptography | 500       |
| 4004 | Cannot scan keys directory.                         | Cryptography | 500       |
| 5001 | Invalid Credit Card Number.                         | Validation   | 400       |
| 5002 | Credit Card is expired.                             | Validation   | 400       |
| 5003 | Expiration should be in 'm/Y' format.               | Validation   | 400       |
| 5004 | Invalid cvv format.                                 | Validation   | 400       |

### Store the card [POST]

+ Request (application/json)
    
    + Attributes
        + card (object)
            + number: `1234567890111111` (string, required)
            + holder: `John Doe` (string, optional)
            + cvv: `123` (string, optional)
            + expiration: `12/20` (string, required) - format m/y
        + ota: `Booking.com` (string, optional) - source of the reservation
        + departure: `2020-05-18` (string, optional) - format Y-m-d

        
    
+ Response 200 (application/json)

    + Attributes
        + token: `48656c6c6f20576f726c646448656c6c6f20576f726c646448656c6c6f20576f726c646448656c6c6f20576f726c646448656c6c6f20576f726c6464sd2a2df7` (string) - token with length of 128

+ Response 400 (application/json)

    + Attributes (CreditCardErrorCodes400)

+ Response 500 (application/json)

    + Attributes (CreditCardErrorCodes500)

### Unlock the card [PATCH]
Before getting the card details, there must be API call that unlock the credit card. This call have to go from Previo servers (there is an IP firewall).
+ Request (application/json)

    + Headers
    
            Chm-Token-Cc: Credit card token (string)
    
+ Response 200 (application/json)

    + Body
    
            { "OK" }


+ Response 400 (application/json)

    + Attributes (CreditCardErrorCodes400)

+ Response 403 (application/json)

    + Attributes (CreditCardErrorCodes403)

+ Response 404 (application/json)

    + Attributes (CreditCardErrorCodes404)

+ Response 500 (application/json)

    + Attributes (CreditCardErrorCodes500)
        

### Get the card [GET]
This API call has to made from Javascript to be PCI DSS compliant 
+ Request (application/json)

    + Headers
    
            Chm-Token-Cc: Credit card token (string)
    
+ Response 200 (application/json)

    + Attributes
        + card (object)
            + number: `1234567890111111` (string)
            + holder: `John Doe` (string)
            + cvv: `123` (string)
            + expiration: `12/20` (string) - format m/y
        + partner: `Booking.com` (string, optional) - source of the reservation
        + departure: `2020-05-18` (string, optional) - format Y-m-d
        + created: `2020-05-18T15:55:26` (string, optional) - format Y-m-d\TH:i:s

+ Response 400 (application/json)

    + Attributes (CreditCardErrorCodes400)

+ Response 404 (application/json)

    + Attributes (CreditCardErrorCodes404)

+ Response 500 (application/json)

    + Attributes (CreditCardErrorCodes500)
        

### Delete the card [DELETE]
This call have to go from Previo servers (there is an IP firewall).
+ Request (application/json)

    + Headers
    
            Chm-Token-Cc: Credit card token (string)
    
+ Response 200 (application/json)

    + Body

            {
                "OK"
            }


+ Response 400 (application/json)

    + Attributes (CreditCardErrorCodes400)

+ Response 403 (application/json)

    + Attributes (CreditCardErrorCodes403)

+ Response 404 (application/json)

    + Attributes (CreditCardErrorCodes404)

+ Response 500 (application/json)

    + Attributes (CreditCardErrorCodes500)

### Delete multiple credit cards [DELETE /api/credit-cards/multiple]
This call have to go from Previo servers (there is an IP firewall).
+ Request (application/json)

    + Body

            ["token1","token2"]

+ Response 200 (application/json)

    + Attributes (UnifiedResponse)
        + data (object)
            + total: 2 (number) - number of received tokens
            + deleted: 1 (number) - number of successfully deleted credit cards

+ Response 200 (application/json)
    
    + Attributes (UnifiedResponse)
        + success: false (boolean)
        + errors: (object)
            + "Content is not valid JSON.


## Data Structure

## ReservationRequest
+ reservationId: `99555BA` (string, required) - Unique ID of the reservation
+ hotelId: 3 (number, required) - Id of the hotel
+ partnerId: 1262 (number, required) - Previo partner ID
+ originPartnerId: 1262 (number, optional) - Origin Previo partner ID (in case partnerId is CHM)
+ status: `new` (enum[string], required) - Reservation status
    + Members
        + `new`
        + `modified`
        + `cancelled`
+ currency: `EUR` (string, required) - `Currency of the reservation in ISO 4217 format (^([A-Z]{3})$)`
+ created: `2020-01-15T13:56:59` (string, optional) - Format Y-m-d\TH:i:s
+ lastChange: `2020-01-15T13:56:59` (string, optional) - Format Y-m-d\TH:i:s
+ language: `cs` (string, optional) - `Format ^([a-z]{2})$` 
+ totalPrice: 300.3 (number, optional) - Total price of the reservation (float)
+ commissionAmount: 3 (number, optional) - Total commission amount (float)
+ customer (CustomerReservation, required) - Info about the person who book the reservation
+ creditCard (CreditCardReservation, optional) - CreditCard details
+ payment (PaymentReservation, optional) - Info about the person who book the reservation
+ services (ServicesReservation, optional) - Info about the person who book the reservation
+ generalNote: `Some note` (string, optional)
+ extraInfo: `Some note` (string, optional)
+ cancellationPolicy: `Cancellation policy` (string, optional)
+ customerComments: `Comments` (string, optional)
+ rooms (array[RoomReservation], required) - Booked room(s)

## RoomReservation
+ from: `2020-05-05T23:00:59` (string, required) - Format Y-m-d\TH:i:s
+ to: `2020-05-07T23:00:59` (string, required) - Format Y-m-d\TH:i:s
+ roomReservationId: `226` (string, optional) - 
+ roomTypeId: `123456` (string, required) - ID of the booked room type
+ roomTypeName: `Double room` (string, optional) - Name of the booked room type
+ ratePlanId: `123456` (string, required) - ID of the booked rateplan
+ ratePlanName: `Standard Breakfast included` (string, optional) - Name of the booked rateplan
+ guests (array[GuestReservation], required) - Infou about the guests
+ meal: `breakfast` (enum[string], optional) - Meal type
    + Members
        + `not-available`
        + `none`
        + `breakfast`
        + `lunch`
        + `dinner`
        + `half-board`
        + `full-board`
        + `all-inclusive`
        + `other`
+ currency: `EUR` (string, required) - `Currency of the reservation in ISO 4217 format (^([A-Z]{3})$)`
+ totalPrice: 300.3 (number, optional) - Total price of the room (float)
+ commissionAmout: 30.3 (number, optional) - Commission amount
+ taxPrice: 6.3 (number, optional) - 
+ dailyPrices (array[DailyPricesReservation], required) - Infou about the guests
+ addOns (array[AddOnsReservation], required) - Infou about the guests
+ smoking (boolean, optional)
+ facilities (array, optional)
+ info: `Comments` (string, optional)
+ extraInfo: `Comments` (string, optional)
+ remarks: `Comments` (string, optional)

## GuestReservation
+ firstName: `John` (string, required) - 
+ lastName: `Doe` (string, required) - 
+ type: `adult` (enum[string], optional) - Guest category
    + Members
        + `adult`
        + `child`
        + `infant`
        + `pensioner`
        + `other`
+ age: 26 (number, optional) - 

## DailyPricesReservation
+ date: `2020-05-07T23:00:59` (string, required) - Format Y-m-d\TH:i:s
+ price: `36.6` (number, required) - 
+ ratePlanId: `55` (string, optional) - 
+ ratePlanName: `Standard` (string, optional) - 
+ note (string, optional) - 


## AddOnsReservation
+ name: `Breakfast` (string, required) - 
+ pricing: `per-night` (enum[string], required) - Picing method
    + Members
        + `per-night`
        + `per-night-and-person`
        + `once`
        + `once-per-person`
+ pricePerUnit: `35.9` (number, required) - 
+ nights: 2 (number, optional) - 
+ persons: 1 (number, optional) - 
+ totalPrice: `71.8` (number, optional) - 

## PaymentReservation
+ type: `cash` (enum[string], required) - Payment method
    + Members
        + `cc`
        + `transfer`
        + `cash`
        + `ota`
        + `na`
+ amount: 150.7 (number, required)
+ currency: `EUR` (string, required) - `Currency of the payment in ISO 4217 format (^([A-Z]{3})$)`


## ServicesReservation
+ name: `Extra breakfast` (string, required)
+ price: 150.7 (number, required)
+ serviceId: 55 (string, optional)
+ currency: `EUR` (string, required) - `Currency of the service in ISO 4217 format (^([A-Z]{3})$)`


## CreditCardReservation
+ token: `dsf456asdf489cxy7b9xyc456csad214g3adg456dsa1fsa36d325dsf` (string, required)

## CustomerReservation
+ firstName: `John` (string, required)
+ lastName: `Doe` (string, required)
+ email: `john@doe.com` (string, required)
+ phone: `+0033456666` (string, optional)
+ zip: `11000` (string, optional)
+ country: `cs` (string, optional) - `Format ^([a-z]{2})$`
+ city: `Prague` (string, optional)
+ street: `Downing` (string, optional)
+ company: `AbdComp ltd.` (string, optional)
+ companyVatNumber: `4555666` (string, optional)
+ note: `Booker's note` (string, optional)


## PriceActionRequest
+ id: 99 (number, required) - Price action ID
+ daysThreshold: 3 (number, optional) - Number of days
+ priceChange: 15.5 (number, required) - Percentage Discount / Surcharge
+ priceCalculation: `Percent` (enum[string], required) - Price calculation (absolute / percent)
    + Members
        + `Percent`
        + `Absolute`
+ type: `LastMinute` (enum[string], required) - Price action type
    + Members
        + `LastMinute`
        + `FirstMinute`
        + `LongTerm`
        + `Actionn `
+ sinceDate: `2019-10-11` (string, optional) - Format YYYY-MM-DD
+ endDate: `2020-01-15` (string, optional) - Format YYYY-MM-DD
+ daysOfTheWeek (array[string], optional) - Which day of week is the discount valid
    + Members
        + `Mon`
        + `Tue`
        + `Wen`
        + `Thu`
        + `Fri`
        + `Sat`
        + `Sun`
+ roomIds: 195, 2126 (array[number], required) - List of rooms, where the price action is valid
+ room (object, optional)


## AirbnbRoomExtras
+ amenity_categories: [essentials] (array)
+ apt: "" (string)
+ bathrooms: 1 (number)
+ bathroom_shared: null
+ bathroom_shared_with_category: null
+ bed_type_category: "real_bed" (string)
+ bedrooms: 1 (number)
+ beds: 4 (number)
+ cancellation_policy_category: "flexible" (string)
+ check_in_option: null
+ check_in_time: 15 (number)
+ check_in_time_ends_at: null
+ check_out_time: null
+ city: "Praha 9" (string)
+ common_spaces_shared: null
+ common_spaces_shared_with_category: null
+ country_code: "CZ"
+ directions: ""
+ guests_included: 1
+ has_availability: true
+ house_manual: null
+ house_rules: ""
+ id: 40715263
+ instant_book_welcome_message: null
+ instant_booking_lead_time_category: "2_days"
+ lat: 50.111492
+ listing_approval_status: null
+ listing_cleaning_fee: null
+ listing_currency: "EUR"
+ listing_descriptions (array)
    + (array)
        + access: null
        + author_type: "human"
        + description: "TEST"
        + detected_languages: null
        + house_rules: null
        + interaction: null
        + locale: "cs"
        + localized_language_name: "Czech"
        + name: "Previo APP test integration appartman 4"
        + neighborhood_overview: null
        + notes: null
        + space: null
        + summary: "TEST"
        + transit: null
+ listing_extra_person_price: 0
+ listing_monthly_price: null
+ listing_nickname: null
+ listing_price: 1000
+ listing_security_deposit: null
+ listing_weekend_price: null
+ listing_weekly_price: null
+ lng: 14.505368
+ localized_cleaning_fee: null
+ localized_currency: "USD"
+ localized_extra_person_price: 0
+ localized_monthly_price: null
+ localized_price: 1085
+ localized_security_deposit: null
+ localized_weekend_price: null
+ localized_weekly_price: null
+ max_nights_input_value: null
+ min_nights_input_value: null
+ name: "Previo APP test integration appartman 4"
+ permit_or_tax_id: null
+ person_capacity: 4
+ property_external_id: null
+ property_type_category: "apartment"
+ property_type_group: "apartments"
+ requested_approval_status_category: null
+ room_type_category: "private_room"
+ state: "Hlavní město Praha"
+ street: "8825a, Kolbenova 9"
+ synchronization_category: null
+ total_inventory_count: null
+ user_defined_location: true
+ visibility: "platform_partners"
+ zipcode: "190 00"

## AllRoomExtras
+ Airbnb (array[AirbnbRoomExtras])
Meal
## RoomTypeResponse
+ id: `99999A` (string, required) - Room type ID
+ name: 3 (string, required) - Room type name
+ active: true (boolean, required) - Room type is active?
+ defaultAllotment: 2 (number, optional) - Default number of guests in room kind
+ maxAllotment: 4 (number, optional) - Max number of guests in room
+ minNumAdults: 1 (number, optional)
+ maxNumAdults: 2 (number, optional)
+ numChildren: 2 (number, optional)
+ numOfRooms: 99 (number, optional) - How many rooms of this kind is available

## RoomTypeResponseExtra
+ id: `99999A` (string, required) - Room type ID
+ name: 3 (string, required) - Room type name
+ active: true (boolean, required) - Room type is active?
+ defaultAllotment: 2 (number, optional) - Default number of guests in room kind
+ maxAllotment: 4 (number, optional) - Max number of guests in room
+ minNumAdults: 1 (number, optional)
+ maxNumAdults: 2 (number, optional)
+ numChildren: 2 (number, optional)
+ numOfRooms: 99 (number, optional) - How many rooms of this kind is available
+ extra (enum[AllRoomExtras], optional) - Extra informations. May vary depending on OTA.

## AllMealPlans (enum)
+ breakfast
+ halfboard
+ fullboard
+ allinclusive
+ nonelan
+ unspecified

## AllPricingModels (enum)
+ 1 (number) - per occupancy
+ 2 (number) - per day

## RatePlanResponse
+ id: `89999A` (string, required) - Rateplan ID
+ name: 3 (string, required) - Rateplan name
+ active: true (boolean, required) - Rateplan is active?
+ minStay: 2 (number, optional) - Is there any min stay restriction set for this rateplan?
+ maxStay: 4 (number, optional) - Is there any max stay restriction set for this rateplan?
+ mealPlan (AllMealPlans, optional) - Meal plan
+ pricingModel (AllPricingModels, optional) - Pricing model

## ErrorResponseArray
+ result (array, required)
+ errors (array[ErrorResponseType], optional)

## SuccessResponseBoolean
+ result: true (boolean, required) - If the request was successful or not
+ errors (array)

## UnifiedResponse
+ success: true (boolean)
+ message (string)
+ errors (object)
+ data (object)

## ErrorResponseBoolean
+ result: false (boolean, required) - If the request was successful or not
+ errors (array[ErrorResponseType], optional)

## ErrorResponseType
+ errorType: `INVALID_REQUEST` (string, optional) - Error type
+ errorCode: 3203 (number, optional) - Error code
+ errorText: `Partner with ID 1334 has not been registered in services.` (string, optional) - Error description
+ remoteErrorType: null (string, optional) - Error type on OTA side
+ remoteErrorText: null (string, optional) - Error description on OTA side

## PriceActionTypes
+ FirstMinute (string, required) - 
+ LastMinute (string, required) - 
+ LongTerm (string, required) -

## CreditCardErrorCodes400
+ error: `Your Request is invalid.` (string)
+ code: 2002 (enum[number], required)
    + 2002 - Your Request is invalid. (Firewall)
    + 3001 - header (name) must be set. (Headers)
    + 3002 - Invalid (name) length. (Headers)
    + 5001 - Invalid Credit Card Number. (Validation)
    + 5002 - Credit Card is expired. (Validation)
    + 5003 - Expiration should be in 'm/Y' format. (Validation)
    + 5004 - Invalid cvv format. (Validation)

## CreditCardErrorCodes403
+ error: `You don’t have permission to access on this Server.` (string)
+ code: 2001 (enum[number], required)
    + 2001 - You don’t have permission to access on this Server. (Firewall)

## CreditCardErrorCodes404
+ error: `Credit Card not found.` (string)
+ code: 1001 (enum[number], required)
    + 1001 - Credit Card not found. (Elastic)
    + 1004 - Credit Card is Locked. (Elastic)

## CreditCardErrorCodes500
+ error: `Cannot transform response.` (string)
+ code: 1002 (enum[number], required)
    + 1002 - Cannot transform response. (Elastic)
    + 1003 - Cannot provide request. (Elastic)
    + 4001 - Decryption failed. (Cryptography)
    + 4002 - Encryption failed. (Cryptography)
    + 4003 - Cannot read key. (Cryptography)
    + 4004 - Cannot scan keys directory. (Cryptography)
    + 5001 - Invalid Credit Card Number. (Validation)

## StandartAttributes
+ hotelId: 123 (number, required) - ID of the hotel (OTA)
+ partnerId: 1262 (number, required) - ID of the partner (OTA)

## RoomsRatesRequest
+ rooms (array[RoomsRatesRoom], required)
+ rates (array[RoomsRatesRate], required)

## RoomsRatesRoom
+ id: 123 (number, required) - ID of room type
+ defaultAllotment: 2 (number, optional) - Default number of guests in room kind
+ maxAllotment: 4 (number, optional) - Max number of guests in room
+ numOfRooms: 99 (number, optional) - How many rooms of this kind is available
+ name (array[TranslationType], required)
+ description (array[TranslationType], optional)
+ photos (array[PhotoType], optional)

## RoomsRatesRate
+ id: 123 (number, required) - ID of rate plan
+ name: `Standard rate` (string, required)
+ parentId: 4 (number, optional) - Id of parent rate plan, if any
+ priceChange: 15.5 (number, required) - Percentage Discount / Surcharge
+ cancellationPolicy (CancellationPolicyType, required)
+ mealPlan (MealPlanType, optional)
+ roomIds: 1234,5678 (array[number], required)

## TranslationType
+ text (string, required) - translation
+ language: `en` (string, required) - ISO 639-1 language code

## PhotoType
+ url: `https://file_url.com/uri.jpg` (string, required) - File path
+ description (array[TranslationType], optional)

## CancellationPolicyType
+ type (enum[string], required)
    + Members
        + `standard`
        + `non-refundable`
+ rules (array[CancelationPolicyRule], optional)

## CancelationPolicyRule
+ amount: 20 (number, required)
+ amountType (enum[string], required)
    + Members
        + `Percent`
        + `Absolute`
+ offset: 150 (number, required)
+ offsetType (enum[string], required)
    + Members
        + `Hours`
        + `Days`
+ order: 0 (number, optional)
+ validity (DateRange, optional)

## DateRange
+ from: `2019-10-11` (string, optional) - Format YYYY-MM-DD
+ to: `2019-10-15` (string, optional) - Format YYYY-MM-DD

## MealPlanType
+ type: `single` (enum[string], required)
    + Members
        + `none`
        + `single`
        + `multiple`
+ meals (array[MealType], required)

## MealType
+ meal: `breakfast` (enum[string], required)
    + Members
        + `none`
        + `breakfast`
        + `lunch`
        + `dinner`
        + `half-board`
        + `full-board`
        + `all-inclusive`
        + `package`
+ isDefault: true (boolean, required) - is it default meal type for this rate
+ isFree: true (boolean, required) - is for free / price is included in accommodation